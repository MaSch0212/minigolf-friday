using System.ComponentModel.DataAnnotations;
using FastEndpoints;
using FluentValidation;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using MinigolfFriday.Data;
using MinigolfFriday.Models;
using MinigolfFriday.Options;
using MinigolfFriday.Services;

namespace MinigolfFriday.Endpoints.Auth;

/// <param name="LoginToken">The login token of a specific user.</param>
public record GetTokenRequest([property: Required] string LoginToken);

/// <param name="Token">The JWT token generated by the server. Append this to the "Authroization" Header with the "Bearer " prefix to authenticate API calls.</param>
/// <param name="TokenExpiration">The date until the token is valid.</param>
/// <param name="User">The user that the token belongs to.</param>
public record GetTokenResponse(
    [property: Required] string Token,
    [property: Required] DateTimeOffset TokenExpiration,
    [property: Required] User User
);

public class GetTokenRequestValidator : Validator<GetTokenRequest>
{
    public GetTokenRequestValidator()
    {
        RuleFor(x => x.LoginToken).NotEmpty();
    }
}

public class GetTokenEndpoint(
    DatabaseContext databaseContext,
    IJwtService jwtService,
    IOptionsMonitor<AdminOptions> adminOptions,
    IIdService idService
) : Endpoint<GetTokenRequest, GetTokenResponse>
{
    public override void Configure()
    {
        Post("token");
        Group<AuthGroup>();
        AllowAnonymous();
        Description(b => b.Produces(401));
        Summary(s =>
        {
            s.Summary = "Get JWT token";
            s.Responses[401] = "The given login token is invalid.";
        });
    }

    public override async Task HandleAsync(GetTokenRequest req, CancellationToken ct)
    {
        var user = await databaseContext
            .Users.Where(x => x.LoginToken == req.LoginToken)
            .Select(x => new UserInfo(x.Id, x.Alias, x.Roles.Select(x => x.Id)))
            .FirstOrDefaultAsync(ct);

        if (user == null && req.LoginToken == adminOptions.CurrentValue.LoginToken)
            user = new(-1, "{admin}", [Role.Admin]);

        if (user == null)
        {
            Logger.LogWarning("Invalid login token: {LoginToken}", req.LoginToken);
            await SendUnauthorizedAsync(ct);
            return;
        }

        var token = jwtService.GenerateToken(user.Id, user.Roles.ToArray());
        User u =
            new(
                user.Id < 0 ? "admin" : idService.User.Encode(user.Id),
                user.Alias ?? "unknown",
                user.Roles.ToArray(),
                new([], [])
            );
        await SendAsync(new(token.ToTokenString(), token.ValidTo, u), cancellation: ct);
    }

    private record UserInfo(long Id, string? Alias, IEnumerable<Role> Roles);
}
