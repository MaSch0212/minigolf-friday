@layer base, primeng, adjustments, components, utilities, tw;

@import 'primeng/resources/primeng.css' layer(primeng);

@mixin classStartsWith($prefixes...) {
  $selector: '';
  @for $i from 1 through length($prefixes) {
    @if $i > 1 {
      $selector: $selector + ', ';
    }
    $prefix: nth($prefixes, $i);
    $selector: $selector + "[class^='#{$prefix}'], [class*='#{$prefix}']";
  }
  @at-root #{$selector} {
    @content;
  }
}

@layer components {
  @include classStartsWith('i-[') {
    display: inline-block;
    width: 1em;
    height: 1em;
    min-width: 1em;
    min-height: 1em;
    vertical-align: -0.125em;
  }

  @include classStartsWith('i-[mdi--') {
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
  }

  @include classStartsWith('i-[flag--') {
    background-repeat: no-repeat;
    background-size: 100% 100%;
  }
}

@layer tw {
  @tailwind base;
  @tailwind components;
  @tailwind utilities;

  @layer components {
    .helper-text {
      @apply px-4 line-clamp-2;
      &::before {
        @extend [class^='i-['];
        @extend [class^='i-[mdi--'];
        content: ' ';
      }
    }
    .helper-text-info {
      @extend .helper-text;
      @apply i-[mdi--information];
      &::before {
        @apply text-blue-500;
      }
    }
    .helper-text-warning {
      @extend .helper-text;
      @apply i-[mdi--alert];
      &::before {
        @apply text-yellow-500;
      }
    }
    .helper-text-error {
      @extend .helper-text;
      @apply i-[mdi--alert-circle] text-danger;
    }
    .helper-text-success {
      @extend .helper-text;
      @apply i-[mdi--check-circle];
      &::before {
        @apply text-green-500;
      }
    }
  }
}

@layer base {
  html,
  body {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-size: 14px;
  }

  * {
    box-sizing: border-box;
  }
}

@layer adjustments {
  p-button[size='small'] .p-button-icon-only.p-button-rounded {
    @apply w-8 h-8 p-0;
  }

  p-menubar .p-menuitem-icon:has(+ .p-menuitem-text:empty) {
    margin-right: 0;
  }

  .p-dialog {
    @apply p-6 gap-6 bg-surface-a;
  }

  .p-dialog-header,
  .p-dialog-content,
  .p-dialog-footer {
    padding: 0;
  }

  .p-dialog-content {
    @apply -m-2 p-2;
  }

  .p-dialog-footer {
    @apply flex flex-row gap-2 items-center justify-end flex-wrap-reverse;

    button {
      margin-right: 0;
    }
  }

  .p-inputtext {
    width: 100%;

    &.ng-invalid.ng-touched {
      @apply border-danger;

      &:enabled:focus {
        box-shadow: 0 0 0 0.2rem color-mix(in srgb, var(--danger-color) 50%, transparent);
      }
    }
  }

  .p-float-label {
    input,
    textarea,
    .p-inputwrapper {
      ~ label {
        background: var(--surface-b);
      }
    }

    input:focus,
    input.p-filled,
    textarea:focus,
    textarea.p-filled,
    .p-inputwrapper-focus,
    .p-inputwrapper-filled {
      ~ label {
        top: 3px;
        padding: 0 4px;
        left: 8px;
        background: linear-gradient(180deg, var(--surface-a) 50%, var(--surface-b) 50%);
      }
    }

    > .ng-invalid.ng-touched + label {
      @apply text-danger;
    }

    &.required > label::after {
      content: ' *';
    }
  }

  .p-overlaypanel.p-0 .p-overlaypanel-content {
    padding: 0;
  }

  .p-dataview.p-dataview-list .p-dataview-content > .grid > div:last-child {
    border: none;
  }

  [class*='p-input-icon-'] > .mdi {
    line-height: 1rem;
  }

  .p-tooltip-text {
    white-space: break-spaces;
  }
}
